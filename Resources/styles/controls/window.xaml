<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
  <Style x:Key="XStyle">
    <Style.Resources>
      <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Style.Triggers>
          <Trigger Property="UIElement.IsEnabled" Value="false">
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style TargetType="{x:Type Label}">
        <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
      </Style>
      <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Control.Background">
          <Setter.Value>
            <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
          </Setter.Value>
        </Setter>
        <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="sWindow" TargetType="{x:Type Window}">
    <Style.Resources>
      <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Style.Triggers>
          <Trigger Property="UIElement.IsEnabled" Value="false">
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style TargetType="{x:Type Label}">
        <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
      </Style>
    </Style.Resources>
    <Setter Property="Control.Background" Value="{DynamicResource WindowsBackground}"/>
  </Style>
  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="FrameworkElement.Height" Value="24"/>
    <Setter Property="FrameworkElement.Width" Value="144"/>
    <Setter Property="Control.Padding" Value="2"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="Control.BorderBrush">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.6"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="FrameworkElement.Margin" Value="2 2"/>
    <Style.Triggers>
      <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
        <Setter Property="Control.Foreground" Value="{DynamicResource ReadOnlyForeground}"/>
      </Trigger>
    </Style.Triggers>
    <Style.Resources>
      <Style TargetType="{x:Type Label}">
        <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
      </Style>
      <Style TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="2"/>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="BigTextBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.Height" Value="48"/>
    <Setter Property="FrameworkElement.Width" Value="256"/>
  </Style>
  <Style TargetType="{x:Type xctk:WatermarkPasswordBox}">
    <Setter Property="Control.Background">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.6"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
  </Style>
  <Style TargetType="{x:Type xctk:IntegerUpDown}">
    <Setter Property="FrameworkElement.Height" Value="24"/>
    <Setter Property="FrameworkElement.Width" Value="48"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="Control.Background">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.6"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Style.Resources>
      <Style TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Control.Background" Value="{DynamicResource Background80}"/>
      </Style>
    </Style.Resources>
  </Style>
  <Style TargetType="{x:Type xctk:ButtonSpinner}">
    <Setter Property="Control.Background" Value="{DynamicResource Background80}"/>
  </Style>
  <Style TargetType="{x:Type xctk:DecimalUpDown}">
    <Style.Resources>
      <Style TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Control.Background" Value="{DynamicResource Background80}"/>
      </Style>
      <Style TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="2"/>
      </Style>
    </Style.Resources>
    <Setter Property="FrameworkElement.Height" Value="24"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="FrameworkElement.Width" Value="48"/>
    <Setter Property="Control.BorderBrush">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.6"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Style.Triggers>
      <Trigger Property="xctk:InputBase.IsReadOnly" Value="true">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type xctk:ColorPicker}">
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DefaultForeground60}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ListMainBackground}"/>
    <Setter Property="xctk:ColorPicker.DropDownBackground" Value="{DynamicResource ListMainBackground}"/>
    <Setter Property="xctk:ColorPicker.HeaderBackground" Value="{DynamicResource ListMainBackground}"/>
    <Setter Property="xctk:ColorPicker.TabBackground" Value="{DynamicResource ListMainBackground}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="xctk:ColorPicker.HeaderForeground" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="xctk:ColorPicker.TabForeground" Value="{DynamicResource DefaultForeground}"/>
  </Style>
  <Style TargetType="{x:Type StackPanel}" BasedOn="{StaticResource XStyle}"/>
  <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource XStyle}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="0 2"/>
    <Style.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="true">
        <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.BorderBrush">
          <Setter.Value>
            <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.4"/>
          </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding" Value="4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HeaderCheckBox" BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.Margin" Value="4"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Margin="1">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="GlyphPanel" BorderThickness="1" Height="16" Width="16" CornerRadius="2" Margin="0,1"
                    Visibility="Visible" Grid.Column="0">
              <Border.Background>
                <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
              </Border.Background>
              <Border.BorderBrush>
                <SolidColorBrush po:Freeze="True" Color="{DynamicResource DefaultForegroundColor}" Opacity="0.6"/>
              </Border.BorderBrush>
              <Path x:Name="Check" Visibility="Visible" Data="M 0,2.5 L 2.5,5 7,0.5 " FlowDirection="LeftToRight"
                    HorizontalAlignment="Center" Stroke="{DynamicResource DefaultForeground}" StrokeThickness="1.5"
                    VerticalAlignment="Center"/>
            </Border>
            <ContentPresenter Margin="4,0,0,0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Left"
                              RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="False">
              <Setter TargetName="Check" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter Value="{DynamicResource DefaultForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value="0.6"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
  </Style>
  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type Grid}" BasedOn="{StaticResource XStyle}"/>
  <Style TargetType="{x:Type Page}" BasedOn="{StaticResource XStyle}">
    <Style.Resources>
      <Style TargetType="{x:Type Grid}" BasedOn="{StaticResource XStyle}">
        <Style.Resources>
          <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource DefaultForeground}"/>
          </Style>
          <Style TargetType="{x:Type Label}">
            <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
          </Style>
        </Style.Resources>
      </Style>
    </Style.Resources>
  </Style>
  <Style TargetType="{x:Type ListBox}">
    <Setter Property="Control.Background">
      <Setter.Value>
        <SolidColorBrush po:Freeze="True" Color="{DynamicResource ListMainBackgroundColor}" Opacity="0.8"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
  </Style>
  <Style x:Key="LeftButtonPanel" TargetType="{x:Type StackPanel}"
         BasedOn="{StaticResource {x:Type StackPanel}}">
    <Setter Property="FrameworkElement.Margin" Value="0 -4 4 4"/>
  </Style>
  <Style TargetType="{x:Type ToolTip}">
    <Setter Property="TextBlock.TextAlignment" Value="Left"/>
    <Setter Property="Control.Background" Value="{DynamicResource WindowsBackground}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultForeground}"/>
    <Setter Property="UIElement.Opacity" Value="0.9"/>
  </Style>
</ResourceDictionary>